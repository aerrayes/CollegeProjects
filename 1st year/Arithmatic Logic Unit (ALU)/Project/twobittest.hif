HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	Decrement.v
	{
		decrement [] [Full_adder.v]
		{
			4 [] [];
		}
	}
	onebittest.v
	{
		onebittest [] [Decrement.v,Full_adder.v,half_adder.v]
		{
			1 [] [];
		}
	}
	twobittest.v
	{
		twobittest [] [onebittest.v]
		{
			0 [] [];
		}
	}
}
TREE
{
	twobittest::(0,0):(0): twobittest.v
	{
		onebittest:1:(9,0):(16,one_one): onebittest.v
		{
			half_adder::(8,0):(107,inc1): half_adder.v;
			full_adder::(12,0):(108,f1): full_adder.v
			{
				half_adder::(5,0):(8,h1): half_adder.v;
				half_adder::(6,0):(9,h2): half_adder.v;
			}
			full_adder::(13,0):(109,f2): full_adder.v
			{
				half_adder::(5,0):(8,h1): half_adder.v;
				half_adder::(6,0):(9,h2): half_adder.v;
			}
			decrement:4:(14,0):(110,d1): Decrement.v
			{
				full_adder::(4,0):(5,x): full_adder.v
				{
					half_adder::(5,0):(8,h1): half_adder.v;
					half_adder::(6,0):(9,h2): half_adder.v;
				}
			}
		}
		onebittest:1:(10,0):(17,one_two): onebittest.v
		{
			half_adder::(8,0):(107,inc1): half_adder.v;
			full_adder::(12,0):(108,f1): full_adder.v
			{
				half_adder::(5,0):(8,h1): half_adder.v;
				half_adder::(6,0):(9,h2): half_adder.v;
			}
			full_adder::(13,0):(109,f2): full_adder.v
			{
				half_adder::(5,0):(8,h1): half_adder.v;
				half_adder::(6,0):(9,h2): half_adder.v;
			}
			decrement:4:(14,0):(110,d1): Decrement.v
			{
				full_adder::(4,0):(5,x): full_adder.v
				{
					half_adder::(5,0):(8,h1): half_adder.v;
					half_adder::(6,0):(9,h2): half_adder.v;
				}
			}
		}
	}
}
